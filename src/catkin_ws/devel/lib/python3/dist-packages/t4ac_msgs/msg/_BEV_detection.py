# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from t4ac_msgs/BEV_detection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BEV_detection(genpy.Message):
  _md5sum = "6e7e32ae5122e513b61afaaf47d1cdc1"
  _type = "t4ac_msgs/BEV_detection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Techs4AgeCar project

string type         # Object type
float64 score       # Object probability (0 to 1)
uint16 object_id    # Object ID 

float64   x         # BEV x centroid
float64   y         # BEV y centroid 
float64   vel_lin   # (Only Groundtruth) Linear velocity (Module of vx and vy)
float64   vel_ang   # (Only Groundtruth) Angular velocity (Z-axis)
float64[] tl_br     # 2D bbox top-left, bottom-right xy coordinates
float64[] x_corners # 3D bbox x coordinates of the corners
float64[] y_corners # 3D bbox y coordinates of the corners
float64   l         # BEV length of the object
float64   w         # BEV width of the object
float64   o         # Object orientation

bool safety_zone    # If true, the detection is very near the vehicle 
                    # Evaluate the predicted collision with this detection


"""
  __slots__ = ['type','score','object_id','x','y','vel_lin','vel_ang','tl_br','x_corners','y_corners','l','w','o','safety_zone']
  _slot_types = ['string','float64','uint16','float64','float64','float64','float64','float64[]','float64[]','float64[]','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,score,object_id,x,y,vel_lin,vel_ang,tl_br,x_corners,y_corners,l,w,o,safety_zone

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BEV_detection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.score is None:
        self.score = 0.
      if self.object_id is None:
        self.object_id = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.vel_lin is None:
        self.vel_lin = 0.
      if self.vel_ang is None:
        self.vel_ang = 0.
      if self.tl_br is None:
        self.tl_br = []
      if self.x_corners is None:
        self.x_corners = []
      if self.y_corners is None:
        self.y_corners = []
      if self.l is None:
        self.l = 0.
      if self.w is None:
        self.w = 0.
      if self.o is None:
        self.o = 0.
      if self.safety_zone is None:
        self.safety_zone = False
    else:
      self.type = ''
      self.score = 0.
      self.object_id = 0
      self.x = 0.
      self.y = 0.
      self.vel_lin = 0.
      self.vel_ang = 0.
      self.tl_br = []
      self.x_corners = []
      self.y_corners = []
      self.l = 0.
      self.w = 0.
      self.o = 0.
      self.safety_zone = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dH4d().pack(_x.score, _x.object_id, _x.x, _x.y, _x.vel_lin, _x.vel_ang))
      length = len(self.tl_br)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tl_br))
      length = len(self.x_corners)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.x_corners))
      length = len(self.y_corners)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.y_corners))
      _x = self
      buff.write(_get_struct_3dB().pack(_x.l, _x.w, _x.o, _x.safety_zone))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.score, _x.object_id, _x.x, _x.y, _x.vel_lin, _x.vel_ang,) = _get_struct_dH4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tl_br = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.x_corners = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.y_corners = s.unpack(str[start:end])
      _x = self
      start = end
      end += 25
      (_x.l, _x.w, _x.o, _x.safety_zone,) = _get_struct_3dB().unpack(str[start:end])
      self.safety_zone = bool(self.safety_zone)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dH4d().pack(_x.score, _x.object_id, _x.x, _x.y, _x.vel_lin, _x.vel_ang))
      length = len(self.tl_br)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tl_br.tostring())
      length = len(self.x_corners)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.x_corners.tostring())
      length = len(self.y_corners)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.y_corners.tostring())
      _x = self
      buff.write(_get_struct_3dB().pack(_x.l, _x.w, _x.o, _x.safety_zone))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.score, _x.object_id, _x.x, _x.y, _x.vel_lin, _x.vel_ang,) = _get_struct_dH4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tl_br = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.x_corners = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.y_corners = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 25
      (_x.l, _x.w, _x.o, _x.safety_zone,) = _get_struct_3dB().unpack(str[start:end])
      self.safety_zone = bool(self.safety_zone)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3dB = None
def _get_struct_3dB():
    global _struct_3dB
    if _struct_3dB is None:
        _struct_3dB = struct.Struct("<3dB")
    return _struct_3dB
_struct_dH4d = None
def _get_struct_dH4d():
    global _struct_dH4d
    if _struct_dH4d is None:
        _struct_dH4d = struct.Struct("<dH4d")
    return _struct_dH4d
