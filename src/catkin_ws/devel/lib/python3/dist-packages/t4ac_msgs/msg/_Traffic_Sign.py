# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from t4ac_msgs/Traffic_Sign.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Traffic_Sign(genpy.Message):
  _md5sum = "f266b8af366a609a7c528b57f35853d1"
  _type = "t4ac_msgs/Traffic_Sign"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Techs4AgeCar project

string type                                    # Traffic Sign type
uint8[] lanes                                  # Lanes involved

float64   x1                                   # Top-left x coordinate
float64   y1                                   # Top-left y coordinate 
float64   x2                                   # Bottom-right x coordinate
float64   y2                                   # Bottom-right y coordinate 
geometry_msgs/PoseWithCovariance local_pose    # 3D Centroid x,y,z (Ego-vehicle frame)
geometry_msgs/PoseWithCovariance global_pose   # 3D Centroid x,y,z (Map frame)

float64  stop_line                             # Minimum distance at which the traffic light is 
                                               # fully observed. TODO: TAKE THIS STOP LINE FROM 
                                               # THE MAP AND ENSURE YOU OBSERVE THE CORRESPONDING
                                               # TRAFFIC LIGHT AT THIS POINT
================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['type','lanes','x1','y1','x2','y2','local_pose','global_pose','stop_line']
  _slot_types = ['string','uint8[]','float64','float64','float64','float64','geometry_msgs/PoseWithCovariance','geometry_msgs/PoseWithCovariance','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,lanes,x1,y1,x2,y2,local_pose,global_pose,stop_line

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Traffic_Sign, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.lanes is None:
        self.lanes = b''
      if self.x1 is None:
        self.x1 = 0.
      if self.y1 is None:
        self.y1 = 0.
      if self.x2 is None:
        self.x2 = 0.
      if self.y2 is None:
        self.y2 = 0.
      if self.local_pose is None:
        self.local_pose = geometry_msgs.msg.PoseWithCovariance()
      if self.global_pose is None:
        self.global_pose = geometry_msgs.msg.PoseWithCovariance()
      if self.stop_line is None:
        self.stop_line = 0.
    else:
      self.type = ''
      self.lanes = b''
      self.x1 = 0.
      self.y1 = 0.
      self.x2 = 0.
      self.y2 = 0.
      self.local_pose = geometry_msgs.msg.PoseWithCovariance()
      self.global_pose = geometry_msgs.msg.PoseWithCovariance()
      self.stop_line = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lanes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_11d().pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.local_pose.pose.position.x, _x.local_pose.pose.position.y, _x.local_pose.pose.position.z, _x.local_pose.pose.orientation.x, _x.local_pose.pose.orientation.y, _x.local_pose.pose.orientation.z, _x.local_pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.local_pose.covariance))
      _x = self
      buff.write(_get_struct_7d().pack(_x.global_pose.pose.position.x, _x.global_pose.pose.position.y, _x.global_pose.pose.position.z, _x.global_pose.pose.orientation.x, _x.global_pose.pose.orientation.y, _x.global_pose.pose.orientation.z, _x.global_pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.global_pose.covariance))
      _x = self.stop_line
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.local_pose is None:
        self.local_pose = geometry_msgs.msg.PoseWithCovariance()
      if self.global_pose is None:
        self.global_pose = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.lanes = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.x1, _x.y1, _x.x2, _x.y2, _x.local_pose.pose.position.x, _x.local_pose.pose.position.y, _x.local_pose.pose.position.z, _x.local_pose.pose.orientation.x, _x.local_pose.pose.orientation.y, _x.local_pose.pose.orientation.z, _x.local_pose.pose.orientation.w,) = _get_struct_11d().unpack(str[start:end])
      start = end
      end += 288
      self.local_pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.global_pose.pose.position.x, _x.global_pose.pose.position.y, _x.global_pose.pose.position.z, _x.global_pose.pose.orientation.x, _x.global_pose.pose.orientation.y, _x.global_pose.pose.orientation.z, _x.global_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.global_pose.covariance = _get_struct_36d().unpack(str[start:end])
      start = end
      end += 8
      (self.stop_line,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lanes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_11d().pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.local_pose.pose.position.x, _x.local_pose.pose.position.y, _x.local_pose.pose.position.z, _x.local_pose.pose.orientation.x, _x.local_pose.pose.orientation.y, _x.local_pose.pose.orientation.z, _x.local_pose.pose.orientation.w))
      buff.write(self.local_pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.global_pose.pose.position.x, _x.global_pose.pose.position.y, _x.global_pose.pose.position.z, _x.global_pose.pose.orientation.x, _x.global_pose.pose.orientation.y, _x.global_pose.pose.orientation.z, _x.global_pose.pose.orientation.w))
      buff.write(self.global_pose.covariance.tostring())
      _x = self.stop_line
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.local_pose is None:
        self.local_pose = geometry_msgs.msg.PoseWithCovariance()
      if self.global_pose is None:
        self.global_pose = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.lanes = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.x1, _x.y1, _x.x2, _x.y2, _x.local_pose.pose.position.x, _x.local_pose.pose.position.y, _x.local_pose.pose.position.z, _x.local_pose.pose.orientation.x, _x.local_pose.pose.orientation.y, _x.local_pose.pose.orientation.z, _x.local_pose.pose.orientation.w,) = _get_struct_11d().unpack(str[start:end])
      start = end
      end += 288
      self.local_pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 56
      (_x.global_pose.pose.position.x, _x.global_pose.pose.position.y, _x.global_pose.pose.position.z, _x.global_pose.pose.orientation.x, _x.global_pose.pose.orientation.y, _x.global_pose.pose.orientation.z, _x.global_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.global_pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      start = end
      end += 8
      (self.stop_line,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
