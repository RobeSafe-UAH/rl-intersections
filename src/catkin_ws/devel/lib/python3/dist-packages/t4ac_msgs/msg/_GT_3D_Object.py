# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from t4ac_msgs/GT_3D_Object.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import vision_msgs.msg

class GT_3D_Object(genpy.Message):
  _md5sum = "ca62318d44e5363ce4cf524c880fbfa2"
  _type = "t4ac_msgs/GT_3D_Object"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Techs4AgeCar project

string type                                 # Object type if it is known (car, pedestrian, truck, etc)
uint32 object_id                            # Id assign to an object
float32 alpha                               # Observation angle of object
vision_msgs/BoundingBox2D bounding_box_2D   # Object 2D bounding box
geometry_msgs/Point position                # Center of the object
geometry_msgs/Vector3 dimensions            # Object dimensions (l, w, h)
float32 rotation_z                          # Object rotation along z axis
geometry_msgs/Vector3 velocity              # Velocity of the object related to the ego vehicle
float32 truncated                           # Float from 0 (non-truncated) to 1 (truncated), where truncated refers to the object leaving image boundaries
uint8 occluded                              # Integer (0,1,2,3) indicating occlusion state: 0 = fully visible, 1 = partly occluded, 2 = largely occluded, 3 = not visible to the camera
================================================================================
MSG: vision_msgs/BoundingBox2D
# A 2D bounding box that can be rotated about its center.
# All dimensions are in pixels, but represented using floating-point
#   values to allow sub-pixel precision. If an exact pixel crop is required
#   for a rotated bounding box, it can be calculated using Bresenham's line
#   algorithm.

# The 2D position (in pixels) and orientation of the bounding box center.
geometry_msgs/Pose2D center

# The size (in pixels) of the bounding box surrounding the object relative
#   to the pose of its center.
float64 size_x
float64 size_y

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['type','object_id','alpha','bounding_box_2D','position','dimensions','rotation_z','velocity','truncated','occluded']
  _slot_types = ['string','uint32','float32','vision_msgs/BoundingBox2D','geometry_msgs/Point','geometry_msgs/Vector3','float32','geometry_msgs/Vector3','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,object_id,alpha,bounding_box_2D,position,dimensions,rotation_z,velocity,truncated,occluded

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GT_3D_Object, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.object_id is None:
        self.object_id = 0
      if self.alpha is None:
        self.alpha = 0.
      if self.bounding_box_2D is None:
        self.bounding_box_2D = vision_msgs.msg.BoundingBox2D()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.rotation_z is None:
        self.rotation_z = 0.
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.truncated is None:
        self.truncated = 0.
      if self.occluded is None:
        self.occluded = 0
    else:
      self.type = ''
      self.object_id = 0
      self.alpha = 0.
      self.bounding_box_2D = vision_msgs.msg.BoundingBox2D()
      self.position = geometry_msgs.msg.Point()
      self.dimensions = geometry_msgs.msg.Vector3()
      self.rotation_z = 0.
      self.velocity = geometry_msgs.msg.Vector3()
      self.truncated = 0.
      self.occluded = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_If11df3dfB().pack(_x.object_id, _x.alpha, _x.bounding_box_2D.center.x, _x.bounding_box_2D.center.y, _x.bounding_box_2D.center.theta, _x.bounding_box_2D.size_x, _x.bounding_box_2D.size_y, _x.position.x, _x.position.y, _x.position.z, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.rotation_z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.truncated, _x.occluded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bounding_box_2D is None:
        self.bounding_box_2D = vision_msgs.msg.BoundingBox2D()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 129
      (_x.object_id, _x.alpha, _x.bounding_box_2D.center.x, _x.bounding_box_2D.center.y, _x.bounding_box_2D.center.theta, _x.bounding_box_2D.size_x, _x.bounding_box_2D.size_y, _x.position.x, _x.position.y, _x.position.z, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.rotation_z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.truncated, _x.occluded,) = _get_struct_If11df3dfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_If11df3dfB().pack(_x.object_id, _x.alpha, _x.bounding_box_2D.center.x, _x.bounding_box_2D.center.y, _x.bounding_box_2D.center.theta, _x.bounding_box_2D.size_x, _x.bounding_box_2D.size_y, _x.position.x, _x.position.y, _x.position.z, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.rotation_z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.truncated, _x.occluded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bounding_box_2D is None:
        self.bounding_box_2D = vision_msgs.msg.BoundingBox2D()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 129
      (_x.object_id, _x.alpha, _x.bounding_box_2D.center.x, _x.bounding_box_2D.center.y, _x.bounding_box_2D.center.theta, _x.bounding_box_2D.size_x, _x.bounding_box_2D.size_y, _x.position.x, _x.position.y, _x.position.z, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.rotation_z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.truncated, _x.occluded,) = _get_struct_If11df3dfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_If11df3dfB = None
def _get_struct_If11df3dfB():
    global _struct_If11df3dfB
    if _struct_If11df3dfB is None:
        _struct_If11df3dfB = struct.Struct("<If11df3dfB")
    return _struct_If11df3dfB
