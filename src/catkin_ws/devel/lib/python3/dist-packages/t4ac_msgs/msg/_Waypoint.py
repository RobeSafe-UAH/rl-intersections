# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from t4ac_msgs/Waypoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import t4ac_msgs.msg

class Waypoint(genpy.Message):
  _md5sum = "0077c4b075dc1aed9256fe7f551799fe"
  _type = "t4ac_msgs/Waypoint"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# T4ac Project 

Header header
int32 id
Transform transform
int32 road_id
int32 lane_id
int32 junction
float64 s
float64 lane_width
string lane_change
string lane_type
string right_lane_marking
string left_lane_marking
int32 vmax
string vunit
int32 nLanes
int32 lanePosition
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: t4ac_msgs/Transform
# T4ac Project

Location location
Rotation rotation
================================================================================
MSG: t4ac_msgs/Location
# T4ac Project 

float64 x
float64 y
float64 z
================================================================================
MSG: t4ac_msgs/Rotation
# T4ac Project 

float64 pitch
float64 yaw
float64 roll"""
  __slots__ = ['header','id','transform','road_id','lane_id','junction','s','lane_width','lane_change','lane_type','right_lane_marking','left_lane_marking','vmax','vunit','nLanes','lanePosition']
  _slot_types = ['std_msgs/Header','int32','t4ac_msgs/Transform','int32','int32','int32','float64','float64','string','string','string','string','int32','string','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,transform,road_id,lane_id,junction,s,lane_width,lane_change,lane_type,right_lane_marking,left_lane_marking,vmax,vunit,nLanes,lanePosition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Waypoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.transform is None:
        self.transform = t4ac_msgs.msg.Transform()
      if self.road_id is None:
        self.road_id = 0
      if self.lane_id is None:
        self.lane_id = 0
      if self.junction is None:
        self.junction = 0
      if self.s is None:
        self.s = 0.
      if self.lane_width is None:
        self.lane_width = 0.
      if self.lane_change is None:
        self.lane_change = ''
      if self.lane_type is None:
        self.lane_type = ''
      if self.right_lane_marking is None:
        self.right_lane_marking = ''
      if self.left_lane_marking is None:
        self.left_lane_marking = ''
      if self.vmax is None:
        self.vmax = 0
      if self.vunit is None:
        self.vunit = ''
      if self.nLanes is None:
        self.nLanes = 0
      if self.lanePosition is None:
        self.lanePosition = 0
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.transform = t4ac_msgs.msg.Transform()
      self.road_id = 0
      self.lane_id = 0
      self.junction = 0
      self.s = 0.
      self.lane_width = 0.
      self.lane_change = ''
      self.lane_type = ''
      self.right_lane_marking = ''
      self.left_lane_marking = ''
      self.vmax = 0
      self.vunit = ''
      self.nLanes = 0
      self.lanePosition = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6d3i2d().pack(_x.id, _x.transform.location.x, _x.transform.location.y, _x.transform.location.z, _x.transform.rotation.pitch, _x.transform.rotation.yaw, _x.transform.rotation.roll, _x.road_id, _x.lane_id, _x.junction, _x.s, _x.lane_width))
      _x = self.lane_change
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lane_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_lane_marking
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_lane_marking
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vmax
      buff.write(_get_struct_i().pack(_x))
      _x = self.vunit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.nLanes, _x.lanePosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.transform is None:
        self.transform = t4ac_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.id, _x.transform.location.x, _x.transform.location.y, _x.transform.location.z, _x.transform.rotation.pitch, _x.transform.rotation.yaw, _x.transform.rotation.roll, _x.road_id, _x.lane_id, _x.junction, _x.s, _x.lane_width,) = _get_struct_i6d3i2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lane_change = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lane_change = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lane_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lane_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_lane_marking = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_lane_marking = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_lane_marking = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_lane_marking = str[start:end]
      start = end
      end += 4
      (self.vmax,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vunit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vunit = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.nLanes, _x.lanePosition,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6d3i2d().pack(_x.id, _x.transform.location.x, _x.transform.location.y, _x.transform.location.z, _x.transform.rotation.pitch, _x.transform.rotation.yaw, _x.transform.rotation.roll, _x.road_id, _x.lane_id, _x.junction, _x.s, _x.lane_width))
      _x = self.lane_change
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lane_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_lane_marking
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_lane_marking
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vmax
      buff.write(_get_struct_i().pack(_x))
      _x = self.vunit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.nLanes, _x.lanePosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.transform is None:
        self.transform = t4ac_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.id, _x.transform.location.x, _x.transform.location.y, _x.transform.location.z, _x.transform.rotation.pitch, _x.transform.rotation.yaw, _x.transform.rotation.roll, _x.road_id, _x.lane_id, _x.junction, _x.s, _x.lane_width,) = _get_struct_i6d3i2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lane_change = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lane_change = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lane_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lane_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_lane_marking = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_lane_marking = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_lane_marking = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_lane_marking = str[start:end]
      start = end
      end += 4
      (self.vmax,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vunit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vunit = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.nLanes, _x.lanePosition,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i6d3i2d = None
def _get_struct_i6d3i2d():
    global _struct_i6d3i2d
    if _struct_i6d3i2d is None:
        _struct_i6d3i2d = struct.Struct("<i6d3i2d")
    return _struct_i6d3i2d
