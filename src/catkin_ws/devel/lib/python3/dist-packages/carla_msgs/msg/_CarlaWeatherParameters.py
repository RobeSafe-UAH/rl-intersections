# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from carla_msgs/CarlaWeatherParameters.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CarlaWeatherParameters(genpy.Message):
  _md5sum = "bb273e4588ee8778c1dac74839d4709e"
  _type = "carla_msgs/CarlaWeatherParameters"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
# Copyright (c) 2020 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#

float32 cloudiness
float32 precipitation
float32 precipitation_deposits
float32 wind_intensity
float32 fog_density
float32 fog_distance
float32 wetness
float32 sun_azimuth_angle
float32 sun_altitude_angle
"""
  __slots__ = ['cloudiness','precipitation','precipitation_deposits','wind_intensity','fog_density','fog_distance','wetness','sun_azimuth_angle','sun_altitude_angle']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cloudiness,precipitation,precipitation_deposits,wind_intensity,fog_density,fog_distance,wetness,sun_azimuth_angle,sun_altitude_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarlaWeatherParameters, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cloudiness is None:
        self.cloudiness = 0.
      if self.precipitation is None:
        self.precipitation = 0.
      if self.precipitation_deposits is None:
        self.precipitation_deposits = 0.
      if self.wind_intensity is None:
        self.wind_intensity = 0.
      if self.fog_density is None:
        self.fog_density = 0.
      if self.fog_distance is None:
        self.fog_distance = 0.
      if self.wetness is None:
        self.wetness = 0.
      if self.sun_azimuth_angle is None:
        self.sun_azimuth_angle = 0.
      if self.sun_altitude_angle is None:
        self.sun_altitude_angle = 0.
    else:
      self.cloudiness = 0.
      self.precipitation = 0.
      self.precipitation_deposits = 0.
      self.wind_intensity = 0.
      self.fog_density = 0.
      self.fog_distance = 0.
      self.wetness = 0.
      self.sun_azimuth_angle = 0.
      self.sun_altitude_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.cloudiness, _x.precipitation, _x.precipitation_deposits, _x.wind_intensity, _x.fog_density, _x.fog_distance, _x.wetness, _x.sun_azimuth_angle, _x.sun_altitude_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.cloudiness, _x.precipitation, _x.precipitation_deposits, _x.wind_intensity, _x.fog_density, _x.fog_distance, _x.wetness, _x.sun_azimuth_angle, _x.sun_altitude_angle,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.cloudiness, _x.precipitation, _x.precipitation_deposits, _x.wind_intensity, _x.fog_density, _x.fog_distance, _x.wetness, _x.sun_azimuth_angle, _x.sun_altitude_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.cloudiness, _x.precipitation, _x.precipitation_deposits, _x.wind_intensity, _x.fog_density, _x.fog_distance, _x.wetness, _x.sun_azimuth_angle, _x.sun_altitude_angle,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
