// Generated by gencpp from file t4ac_msgs/Bounding_Box_2D.msg
// DO NOT EDIT!


#ifndef T4AC_MSGS_MESSAGE_BOUNDING_BOX_2D_H
#define T4AC_MSGS_MESSAGE_BOUNDING_BOX_2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace t4ac_msgs
{
template <class ContainerAllocator>
struct Bounding_Box_2D_
{
  typedef Bounding_Box_2D_<ContainerAllocator> Type;

  Bounding_Box_2D_()
    : type()
    , score(0.0)
    , x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)  {
    }
  Bounding_Box_2D_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , score(0.0)
    , x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef double _score_type;
  _score_type score;

   typedef double _x1_type;
  _x1_type x1;

   typedef double _y1_type;
  _y1_type y1;

   typedef double _x2_type;
  _x2_type x2;

   typedef double _y2_type;
  _y2_type y2;





  typedef boost::shared_ptr< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> const> ConstPtr;

}; // struct Bounding_Box_2D_

typedef ::t4ac_msgs::Bounding_Box_2D_<std::allocator<void> > Bounding_Box_2D;

typedef boost::shared_ptr< ::t4ac_msgs::Bounding_Box_2D > Bounding_Box_2DPtr;
typedef boost::shared_ptr< ::t4ac_msgs::Bounding_Box_2D const> Bounding_Box_2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator1> & lhs, const ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.score == rhs.score &&
    lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator1> & lhs, const ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace t4ac_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d80b647e84e8d1257c9c2da6fc9509a4";
  }

  static const char* value(const ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd80b647e84e8d125ULL;
  static const uint64_t static_value2 = 0x7c9c2da6fc9509a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "t4ac_msgs/Bounding_Box_2D";
  }

  static const char* value(const ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Techs4AgeCar project\n"
"\n"
"string type         # Object type\n"
"float64 score       # Object probability (0 to 1)\n"
"\n"
"float64   x1        # Top-left x coordinate\n"
"float64   y1        # Top-left y coordinate \n"
"float64   x2        # Bottom-right x coordinate\n"
"float64   y2        # Bottom-right y coordinate \n"
;
  }

  static const char* value(const ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.score);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bounding_Box_2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::t4ac_msgs::Bounding_Box_2D_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "x1: ";
    Printer<double>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<double>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<double>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // T4AC_MSGS_MESSAGE_BOUNDING_BOX_2D_H
