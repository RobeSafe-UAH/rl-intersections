// Generated by gencpp from file t4ac_msgs/MonitorizedRegElem.msg
// DO NOT EDIT!


#ifndef T4AC_MSGS_MESSAGE_MONITORIZEDREGELEM_H
#define T4AC_MSGS_MESSAGE_MONITORIZEDREGELEM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <t4ac_msgs/RegulatoryElement.h>

namespace t4ac_msgs
{
template <class ContainerAllocator>
struct MonitorizedRegElem_
{
  typedef MonitorizedRegElem_<ContainerAllocator> Type;

  MonitorizedRegElem_()
    : reg_elems()  {
    }
  MonitorizedRegElem_(const ContainerAllocator& _alloc)
    : reg_elems(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >::other >  _reg_elems_type;
  _reg_elems_type reg_elems;





  typedef boost::shared_ptr< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> const> ConstPtr;

}; // struct MonitorizedRegElem_

typedef ::t4ac_msgs::MonitorizedRegElem_<std::allocator<void> > MonitorizedRegElem;

typedef boost::shared_ptr< ::t4ac_msgs::MonitorizedRegElem > MonitorizedRegElemPtr;
typedef boost::shared_ptr< ::t4ac_msgs::MonitorizedRegElem const> MonitorizedRegElemConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator1> & lhs, const ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator2> & rhs)
{
  return lhs.reg_elems == rhs.reg_elems;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator1> & lhs, const ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace t4ac_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d4b678817b5a00f2a9678518f83388b";
  }

  static const char* value(const ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d4b678817b5a00fULL;
  static const uint64_t static_value2 = 0x2a9678518f83388bULL;
};

template<class ContainerAllocator>
struct DataType< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> >
{
  static const char* value()
  {
    return "t4ac_msgs/MonitorizedRegElem";
  }

  static const char* value(const ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> >
{
  static const char* value()
  {
    return "### Monitorized Regulatory Elements definition ###\n"
"\n"
"RegulatoryElement[] reg_elems\n"
"================================================================================\n"
"MSG: t4ac_msgs/RegulatoryElement\n"
"### Regulatory Element definition ###\n"
"\n"
"string type\n"
"string id\n"
"Node location\n"
"float64 distance\n"
"string[] affecting_roads\n"
"Landmark[] landmarks\n"
"================================================================================\n"
"MSG: t4ac_msgs/Node\n"
"## Node definition \n"
"\n"
"float64 x	# X\n"
"float64 y	# Y\n"
"float64 z	# Z\n"
"\n"
"================================================================================\n"
"MSG: t4ac_msgs/Landmark\n"
"### Landmark definition ###\n"
"\n"
"Node location\n"
"float64 distance\n"
"string affecting_road\n"
;
  }

  static const char* value(const ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reg_elems);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MonitorizedRegElem_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::t4ac_msgs::MonitorizedRegElem_<ContainerAllocator>& v)
  {
    s << indent << "reg_elems[]" << std::endl;
    for (size_t i = 0; i < v.reg_elems.size(); ++i)
    {
      s << indent << "  reg_elems[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >::stream(s, indent + "    ", v.reg_elems[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // T4AC_MSGS_MESSAGE_MONITORIZEDREGELEM_H
