// Generated by gencpp from file t4ac_msgs/Waypoint.msg
// DO NOT EDIT!


#ifndef T4AC_MSGS_MESSAGE_WAYPOINT_H
#define T4AC_MSGS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <t4ac_msgs/Transform.h>

namespace t4ac_msgs
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : header()
    , id(0)
    , transform()
    , road_id(0)
    , lane_id(0)
    , junction(0)
    , s(0.0)
    , lane_width(0.0)
    , lane_change()
    , lane_type()
    , right_lane_marking()
    , left_lane_marking()
    , vmax(0)
    , vunit()
    , nLanes(0)
    , lanePosition(0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , transform(_alloc)
    , road_id(0)
    , lane_id(0)
    , junction(0)
    , s(0.0)
    , lane_width(0.0)
    , lane_change(_alloc)
    , lane_type(_alloc)
    , right_lane_marking(_alloc)
    , left_lane_marking(_alloc)
    , vmax(0)
    , vunit(_alloc)
    , nLanes(0)
    , lanePosition(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _id_type;
  _id_type id;

   typedef  ::t4ac_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef int32_t _road_id_type;
  _road_id_type road_id;

   typedef int32_t _lane_id_type;
  _lane_id_type lane_id;

   typedef int32_t _junction_type;
  _junction_type junction;

   typedef double _s_type;
  _s_type s;

   typedef double _lane_width_type;
  _lane_width_type lane_width;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lane_change_type;
  _lane_change_type lane_change;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lane_type_type;
  _lane_type_type lane_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _right_lane_marking_type;
  _right_lane_marking_type right_lane_marking;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _left_lane_marking_type;
  _left_lane_marking_type left_lane_marking;

   typedef int32_t _vmax_type;
  _vmax_type vmax;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vunit_type;
  _vunit_type vunit;

   typedef int32_t _nLanes_type;
  _nLanes_type nLanes;

   typedef int32_t _lanePosition_type;
  _lanePosition_type lanePosition;





  typedef boost::shared_ptr< ::t4ac_msgs::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::t4ac_msgs::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::t4ac_msgs::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::t4ac_msgs::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::t4ac_msgs::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::t4ac_msgs::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::t4ac_msgs::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::t4ac_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::t4ac_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.transform == rhs.transform &&
    lhs.road_id == rhs.road_id &&
    lhs.lane_id == rhs.lane_id &&
    lhs.junction == rhs.junction &&
    lhs.s == rhs.s &&
    lhs.lane_width == rhs.lane_width &&
    lhs.lane_change == rhs.lane_change &&
    lhs.lane_type == rhs.lane_type &&
    lhs.right_lane_marking == rhs.right_lane_marking &&
    lhs.left_lane_marking == rhs.left_lane_marking &&
    lhs.vmax == rhs.vmax &&
    lhs.vunit == rhs.vunit &&
    lhs.nLanes == rhs.nLanes &&
    lhs.lanePosition == rhs.lanePosition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::t4ac_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::t4ac_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace t4ac_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::t4ac_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0077c4b075dc1aed9256fe7f551799fe";
  }

  static const char* value(const ::t4ac_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0077c4b075dc1aedULL;
  static const uint64_t static_value2 = 0x9256fe7f551799feULL;
};

template<class ContainerAllocator>
struct DataType< ::t4ac_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "t4ac_msgs/Waypoint";
  }

  static const char* value(const ::t4ac_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::t4ac_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# T4ac Project \n"
"\n"
"Header header\n"
"int32 id\n"
"Transform transform\n"
"int32 road_id\n"
"int32 lane_id\n"
"int32 junction\n"
"float64 s\n"
"float64 lane_width\n"
"string lane_change\n"
"string lane_type\n"
"string right_lane_marking\n"
"string left_lane_marking\n"
"int32 vmax\n"
"string vunit\n"
"int32 nLanes\n"
"int32 lanePosition\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: t4ac_msgs/Transform\n"
"# T4ac Project\n"
"\n"
"Location location\n"
"Rotation rotation\n"
"================================================================================\n"
"MSG: t4ac_msgs/Location\n"
"# T4ac Project \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: t4ac_msgs/Rotation\n"
"# T4ac Project \n"
"\n"
"float64 pitch\n"
"float64 yaw\n"
"float64 roll\n"
;
  }

  static const char* value(const ::t4ac_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::t4ac_msgs::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.transform);
      stream.next(m.road_id);
      stream.next(m.lane_id);
      stream.next(m.junction);
      stream.next(m.s);
      stream.next(m.lane_width);
      stream.next(m.lane_change);
      stream.next(m.lane_type);
      stream.next(m.right_lane_marking);
      stream.next(m.left_lane_marking);
      stream.next(m.vmax);
      stream.next(m.vunit);
      stream.next(m.nLanes);
      stream.next(m.lanePosition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::t4ac_msgs::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::t4ac_msgs::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::t4ac_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "road_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.road_id);
    s << indent << "lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "junction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.junction);
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "lane_width: ";
    Printer<double>::stream(s, indent + "  ", v.lane_width);
    s << indent << "lane_change: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lane_change);
    s << indent << "lane_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lane_type);
    s << indent << "right_lane_marking: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.right_lane_marking);
    s << indent << "left_lane_marking: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.left_lane_marking);
    s << indent << "vmax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vmax);
    s << indent << "vunit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vunit);
    s << indent << "nLanes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nLanes);
    s << indent << "lanePosition: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lanePosition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // T4AC_MSGS_MESSAGE_WAYPOINT_H
