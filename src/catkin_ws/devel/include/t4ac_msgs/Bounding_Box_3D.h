// Generated by gencpp from file t4ac_msgs/Bounding_Box_3D.msg
// DO NOT EDIT!


#ifndef T4AC_MSGS_MESSAGE_BOUNDING_BOX_3D_H
#define T4AC_MSGS_MESSAGE_BOUNDING_BOX_3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovariance.h>
#include <t4ac_msgs/Node.h>

namespace t4ac_msgs
{
template <class ContainerAllocator>
struct Bounding_Box_3D_
{
  typedef Bounding_Box_3D_<ContainerAllocator> Type;

  Bounding_Box_3D_()
    : type()
    , score(0.0)
    , pose()
    , l(0.0)
    , w(0.0)
    , h(0.0)
    , corners_3d()
    , vel_lin(0.0)
    , vel_ang(0.0)  {
    }
  Bounding_Box_3D_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , score(0.0)
    , pose(_alloc)
    , l(0.0)
    , w(0.0)
    , h(0.0)
    , corners_3d(_alloc)
    , vel_lin(0.0)
    , vel_ang(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef double _score_type;
  _score_type score;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef double _l_type;
  _l_type l;

   typedef double _w_type;
  _w_type w;

   typedef double _h_type;
  _h_type h;

   typedef std::vector< ::t4ac_msgs::Node_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::t4ac_msgs::Node_<ContainerAllocator> >::other >  _corners_3d_type;
  _corners_3d_type corners_3d;

   typedef double _vel_lin_type;
  _vel_lin_type vel_lin;

   typedef double _vel_ang_type;
  _vel_ang_type vel_ang;





  typedef boost::shared_ptr< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> const> ConstPtr;

}; // struct Bounding_Box_3D_

typedef ::t4ac_msgs::Bounding_Box_3D_<std::allocator<void> > Bounding_Box_3D;

typedef boost::shared_ptr< ::t4ac_msgs::Bounding_Box_3D > Bounding_Box_3DPtr;
typedef boost::shared_ptr< ::t4ac_msgs::Bounding_Box_3D const> Bounding_Box_3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator1> & lhs, const ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.score == rhs.score &&
    lhs.pose == rhs.pose &&
    lhs.l == rhs.l &&
    lhs.w == rhs.w &&
    lhs.h == rhs.h &&
    lhs.corners_3d == rhs.corners_3d &&
    lhs.vel_lin == rhs.vel_lin &&
    lhs.vel_ang == rhs.vel_ang;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator1> & lhs, const ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace t4ac_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8498b5ba07dec6489238ee817db1326";
  }

  static const char* value(const ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8498b5ba07dec64ULL;
  static const uint64_t static_value2 = 0x89238ee817db1326ULL;
};

template<class ContainerAllocator>
struct DataType< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "t4ac_msgs/Bounding_Box_3D";
  }

  static const char* value(const ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Techs4AgeCar project\n"
"\n"
"string                           type         # Object type\n"
"float64                          score        # Object probability (0 to 1)\n"
"\n"
"geometry_msgs/PoseWithCovariance pose         # Centroid x,y,z, yaw (Laser frame)\n"
"float64                          l            # Object length (Originally along x-laser frame)\n"
"float64                          w            # Object width (Originally along y-laser frame)\n"
"float64                          h            # Object height (z-laser frame)\n"
"Node[]                           corners_3d   # 3D bbox coordinates (x,y,z ; Laser frame)\n"
"float64                          vel_lin      # Absolute global linear velocity\n"
"float64                          vel_ang      # Absolute global angular velocity\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: t4ac_msgs/Node\n"
"## Node definition \n"
"\n"
"float64 x	# X\n"
"float64 y	# Y\n"
"float64 z	# Z\n"
;
  }

  static const char* value(const ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.score);
      stream.next(m.pose);
      stream.next(m.l);
      stream.next(m.w);
      stream.next(m.h);
      stream.next(m.corners_3d);
      stream.next(m.vel_lin);
      stream.next(m.vel_ang);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bounding_Box_3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::t4ac_msgs::Bounding_Box_3D_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "l: ";
    Printer<double>::stream(s, indent + "  ", v.l);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<double>::stream(s, indent + "  ", v.h);
    s << indent << "corners_3d[]" << std::endl;
    for (size_t i = 0; i < v.corners_3d.size(); ++i)
    {
      s << indent << "  corners_3d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::t4ac_msgs::Node_<ContainerAllocator> >::stream(s, indent + "    ", v.corners_3d[i]);
    }
    s << indent << "vel_lin: ";
    Printer<double>::stream(s, indent + "  ", v.vel_lin);
    s << indent << "vel_ang: ";
    Printer<double>::stream(s, indent + "  ", v.vel_ang);
  }
};

} // namespace message_operations
} // namespace ros

#endif // T4AC_MSGS_MESSAGE_BOUNDING_BOX_3D_H
