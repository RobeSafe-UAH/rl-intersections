// Generated by gencpp from file t4ac_msgs/RegulatoryElement.msg
// DO NOT EDIT!


#ifndef T4AC_MSGS_MESSAGE_REGULATORYELEMENT_H
#define T4AC_MSGS_MESSAGE_REGULATORYELEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <t4ac_msgs/Node.h>
#include <t4ac_msgs/Landmark.h>

namespace t4ac_msgs
{
template <class ContainerAllocator>
struct RegulatoryElement_
{
  typedef RegulatoryElement_<ContainerAllocator> Type;

  RegulatoryElement_()
    : type()
    , id()
    , location()
    , distance(0.0)
    , affecting_roads()
    , landmarks()  {
    }
  RegulatoryElement_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , id(_alloc)
    , location(_alloc)
    , distance(0.0)
    , affecting_roads(_alloc)
    , landmarks(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef  ::t4ac_msgs::Node_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef double _distance_type;
  _distance_type distance;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _affecting_roads_type;
  _affecting_roads_type affecting_roads;

   typedef std::vector< ::t4ac_msgs::Landmark_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::t4ac_msgs::Landmark_<ContainerAllocator> >::other >  _landmarks_type;
  _landmarks_type landmarks;





  typedef boost::shared_ptr< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> const> ConstPtr;

}; // struct RegulatoryElement_

typedef ::t4ac_msgs::RegulatoryElement_<std::allocator<void> > RegulatoryElement;

typedef boost::shared_ptr< ::t4ac_msgs::RegulatoryElement > RegulatoryElementPtr;
typedef boost::shared_ptr< ::t4ac_msgs::RegulatoryElement const> RegulatoryElementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::t4ac_msgs::RegulatoryElement_<ContainerAllocator1> & lhs, const ::t4ac_msgs::RegulatoryElement_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.id == rhs.id &&
    lhs.location == rhs.location &&
    lhs.distance == rhs.distance &&
    lhs.affecting_roads == rhs.affecting_roads &&
    lhs.landmarks == rhs.landmarks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::t4ac_msgs::RegulatoryElement_<ContainerAllocator1> & lhs, const ::t4ac_msgs::RegulatoryElement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace t4ac_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4683a17004de77e66d22587d1460f95a";
  }

  static const char* value(const ::t4ac_msgs::RegulatoryElement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4683a17004de77e6ULL;
  static const uint64_t static_value2 = 0x6d22587d1460f95aULL;
};

template<class ContainerAllocator>
struct DataType< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "t4ac_msgs/RegulatoryElement";
  }

  static const char* value(const ::t4ac_msgs::RegulatoryElement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "### Regulatory Element definition ###\n"
"\n"
"string type\n"
"string id\n"
"Node location\n"
"float64 distance\n"
"string[] affecting_roads\n"
"Landmark[] landmarks\n"
"================================================================================\n"
"MSG: t4ac_msgs/Node\n"
"## Node definition \n"
"\n"
"float64 x	# X\n"
"float64 y	# Y\n"
"float64 z	# Z\n"
"\n"
"================================================================================\n"
"MSG: t4ac_msgs/Landmark\n"
"### Landmark definition ###\n"
"\n"
"Node location\n"
"float64 distance\n"
"string affecting_road\n"
;
  }

  static const char* value(const ::t4ac_msgs::RegulatoryElement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.id);
      stream.next(m.location);
      stream.next(m.distance);
      stream.next(m.affecting_roads);
      stream.next(m.landmarks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RegulatoryElement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::t4ac_msgs::RegulatoryElement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::t4ac_msgs::RegulatoryElement_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "location: ";
    s << std::endl;
    Printer< ::t4ac_msgs::Node_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "affecting_roads[]" << std::endl;
    for (size_t i = 0; i < v.affecting_roads.size(); ++i)
    {
      s << indent << "  affecting_roads[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.affecting_roads[i]);
    }
    s << indent << "landmarks[]" << std::endl;
    for (size_t i = 0; i < v.landmarks.size(); ++i)
    {
      s << indent << "  landmarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::t4ac_msgs::Landmark_<ContainerAllocator> >::stream(s, indent + "    ", v.landmarks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // T4AC_MSGS_MESSAGE_REGULATORYELEMENT_H
