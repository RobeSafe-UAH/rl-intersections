// Generated by gencpp from file t4ac_msgs/DM_pose.msg
// DO NOT EDIT!


#ifndef T4AC_MSGS_MESSAGE_DM_POSE_H
#define T4AC_MSGS_MESSAGE_DM_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace t4ac_msgs
{
template <class ContainerAllocator>
struct DM_pose_
{
  typedef DM_pose_<ContainerAllocator> Type;

  DM_pose_()
    : position()
    , orientation()
    , lane_change()  {
    }
  DM_pose_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , orientation(_alloc)
    , lane_change(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lane_change_type;
  _lane_change_type lane_change;





  typedef boost::shared_ptr< ::t4ac_msgs::DM_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::t4ac_msgs::DM_pose_<ContainerAllocator> const> ConstPtr;

}; // struct DM_pose_

typedef ::t4ac_msgs::DM_pose_<std::allocator<void> > DM_pose;

typedef boost::shared_ptr< ::t4ac_msgs::DM_pose > DM_posePtr;
typedef boost::shared_ptr< ::t4ac_msgs::DM_pose const> DM_poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::t4ac_msgs::DM_pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::t4ac_msgs::DM_pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::t4ac_msgs::DM_pose_<ContainerAllocator1> & lhs, const ::t4ac_msgs::DM_pose_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.orientation == rhs.orientation &&
    lhs.lane_change == rhs.lane_change;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::t4ac_msgs::DM_pose_<ContainerAllocator1> & lhs, const ::t4ac_msgs::DM_pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace t4ac_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::DM_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::DM_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::DM_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::DM_pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::DM_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::DM_pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::t4ac_msgs::DM_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32b4ffd6b3679d075a01f2573356ab46";
  }

  static const char* value(const ::t4ac_msgs::DM_pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32b4ffd6b3679d07ULL;
  static const uint64_t static_value2 = 0x5a01f2573356ab46ULL;
};

template<class ContainerAllocator>
struct DataType< ::t4ac_msgs::DM_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "t4ac_msgs/DM_pose";
  }

  static const char* value(const ::t4ac_msgs::DM_pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::t4ac_msgs::DM_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# T4ac Project \n"
"\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Quaternion orientation\n"
"string lane_change  # can be right, left or both \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::t4ac_msgs::DM_pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::t4ac_msgs::DM_pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.lane_change);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DM_pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::t4ac_msgs::DM_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::t4ac_msgs::DM_pose_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "lane_change: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lane_change);
  }
};

} // namespace message_operations
} // namespace ros

#endif // T4AC_MSGS_MESSAGE_DM_POSE_H
