// Generated by gencpp from file carla_msgs/GetBlueprintsResponse.msg
// DO NOT EDIT!


#ifndef CARLA_MSGS_MESSAGE_GETBLUEPRINTSRESPONSE_H
#define CARLA_MSGS_MESSAGE_GETBLUEPRINTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace carla_msgs
{
template <class ContainerAllocator>
struct GetBlueprintsResponse_
{
  typedef GetBlueprintsResponse_<ContainerAllocator> Type;

  GetBlueprintsResponse_()
    : blueprints()  {
    }
  GetBlueprintsResponse_(const ContainerAllocator& _alloc)
    : blueprints(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _blueprints_type;
  _blueprints_type blueprints;





  typedef boost::shared_ptr< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetBlueprintsResponse_

typedef ::carla_msgs::GetBlueprintsResponse_<std::allocator<void> > GetBlueprintsResponse;

typedef boost::shared_ptr< ::carla_msgs::GetBlueprintsResponse > GetBlueprintsResponsePtr;
typedef boost::shared_ptr< ::carla_msgs::GetBlueprintsResponse const> GetBlueprintsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator1> & lhs, const ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.blueprints == rhs.blueprints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator1> & lhs, const ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace carla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "878cac0b77601336a2c3267a758e0e31";
  }

  static const char* value(const ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x878cac0b77601336ULL;
  static const uint64_t static_value2 = 0xa2c3267a758e0e31ULL;
};

template<class ContainerAllocator>
struct DataType< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "carla_msgs/GetBlueprintsResponse";
  }

  static const char* value(const ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] blueprints\n"
"\n"
;
  }

  static const char* value(const ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.blueprints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetBlueprintsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::carla_msgs::GetBlueprintsResponse_<ContainerAllocator>& v)
  {
    s << indent << "blueprints[]" << std::endl;
    for (size_t i = 0; i < v.blueprints.size(); ++i)
    {
      s << indent << "  blueprints[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.blueprints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARLA_MSGS_MESSAGE_GETBLUEPRINTSRESPONSE_H
