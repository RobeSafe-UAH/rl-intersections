// Generated by gencpp from file carla_msgs/SpawnObjectRequest.msg
// DO NOT EDIT!


#ifndef CARLA_MSGS_MESSAGE_SPAWNOBJECTREQUEST_H
#define CARLA_MSGS_MESSAGE_SPAWNOBJECTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <diagnostic_msgs/KeyValue.h>
#include <geometry_msgs/Pose.h>

namespace carla_msgs
{
template <class ContainerAllocator>
struct SpawnObjectRequest_
{
  typedef SpawnObjectRequest_<ContainerAllocator> Type;

  SpawnObjectRequest_()
    : type()
    , id()
    , attributes()
    , transform()
    , attach_to(0)
    , random_pose(false)  {
    }
  SpawnObjectRequest_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , id(_alloc)
    , attributes(_alloc)
    , transform(_alloc)
    , attach_to(0)
    , random_pose(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  _attributes_type;
  _attributes_type attributes;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef uint32_t _attach_to_type;
  _attach_to_type attach_to;

   typedef uint8_t _random_pose_type;
  _random_pose_type random_pose;





  typedef boost::shared_ptr< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpawnObjectRequest_

typedef ::carla_msgs::SpawnObjectRequest_<std::allocator<void> > SpawnObjectRequest;

typedef boost::shared_ptr< ::carla_msgs::SpawnObjectRequest > SpawnObjectRequestPtr;
typedef boost::shared_ptr< ::carla_msgs::SpawnObjectRequest const> SpawnObjectRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::carla_msgs::SpawnObjectRequest_<ContainerAllocator1> & lhs, const ::carla_msgs::SpawnObjectRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.id == rhs.id &&
    lhs.attributes == rhs.attributes &&
    lhs.transform == rhs.transform &&
    lhs.attach_to == rhs.attach_to &&
    lhs.random_pose == rhs.random_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::carla_msgs::SpawnObjectRequest_<ContainerAllocator1> & lhs, const ::carla_msgs::SpawnObjectRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace carla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "692b34e8d779943f044d478da31f4ec5";
  }

  static const char* value(const ::carla_msgs::SpawnObjectRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x692b34e8d779943fULL;
  static const uint64_t static_value2 = 0x044d478da31f4ec5ULL;
};

template<class ContainerAllocator>
struct DataType< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "carla_msgs/SpawnObjectRequest";
  }

  static const char* value(const ::carla_msgs::SpawnObjectRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Copyright (c) 2020 Intel Corporation.\n"
"#\n"
"# This work is licensed under the terms of the MIT license.\n"
"# For a copy, see <https://opensource.org/licenses/MIT>.\n"
"#\n"
"\n"
"string type\n"
"string id\n"
"diagnostic_msgs/KeyValue[] attributes\n"
"geometry_msgs/Pose transform\n"
"uint32 attach_to\n"
"bool random_pose\n"
"\n"
"================================================================================\n"
"MSG: diagnostic_msgs/KeyValue\n"
"string key # what to label this value when viewing\n"
"string value # a value to track over time\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::carla_msgs::SpawnObjectRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.id);
      stream.next(m.attributes);
      stream.next(m.transform);
      stream.next(m.attach_to);
      stream.next(m.random_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpawnObjectRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::carla_msgs::SpawnObjectRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::carla_msgs::SpawnObjectRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "attributes[]" << std::endl;
    for (size_t i = 0; i < v.attributes.size(); ++i)
    {
      s << indent << "  attributes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.attributes[i]);
    }
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "attach_to: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.attach_to);
    s << indent << "random_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.random_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARLA_MSGS_MESSAGE_SPAWNOBJECTREQUEST_H
